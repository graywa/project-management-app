{"version":3,"file":"static/js/941.2d87a7ad.chunk.js","mappings":"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","sources":["webpack://project-management-app/./src/pages/profile/Profile.module.scss?f719","pages/profile/Profile.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"profile\":\"Profile_profile__WYXHE\",\"form_profile\":\"Profile_form_profile__z6Jji\",\"sub_btn\":\"Profile_sub_btn__zGqRI\",\"loader\":\"Profile_loader__eZSOd\",\"del_btn\":\"Profile_del_btn__lV4eb\",\"error\":\"Profile_error__g24XS\"};","import { ErrorMessage, Field, Form, Formik } from 'formik';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { updateUser } from '../../api/auth';\r\nimport Header from '../../components/header/Header';\r\nimport { useAppDispatch, useAppSelector } from '../../redux-hooks/redux-hooks';\r\nimport styles from './Profile.module.scss';\r\nimport * as Yup from 'yup';\r\nimport jwtDecode from 'jwt-decode';\r\nimport LoadingAnimation from '../../components/loading-animation/LoadingAnimation';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { IJwt } from '../../models/IJwt';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport { resetSuccess } from '../../store/authSlice';\r\nimport ConfirmModal from '../../components/confirm-modal/ConfirmModal';\r\n\r\nconst Profile = () => {\r\n  const dispatch = useAppDispatch();\r\n  const [isOpenModal, setIsOpenModal] = useState(false);\r\n  const { token } = useAppSelector((state) => state.auth);\r\n  const { isLoading, error, isSuccess } = useAppSelector((state) => state.auth);\r\n  const { userId: id } = jwtDecode<IJwt>(token);\r\n  const { t } = useTranslation();\r\n\r\n  const validationSchema = Yup.object().shape({\r\n    name: Yup.string()\r\n      .matches(/^[A-Za-z ]*$/, t('please_enter_valid_name'))\r\n      .min(2, t('must_be_more_than_2_characters'))\r\n      .max(30, t('must_be_less_than_30_characters'))\r\n      .required(t('name_is_required')),\r\n    login: Yup.string()\r\n      .matches(/^[a-zA-Z0-9_-]*$/, t('please_enter_valid_login'))\r\n      .min(3, t('must_be_more_than_3_characters'))\r\n      .max(20, t('must_be_less_than_20_characters'))\r\n      .required(t('login_is_required')),\r\n    password: Yup.string()\r\n      .matches(/^[a-zA-Z0-9]*$/, t('password_can_contain_only_latin_letters_and_ciphers'))\r\n      .min(4, t('must_be_more_than_4_characters'))\r\n      .max(16, t('must_be_less_than_16_characters'))\r\n      .required(t('password_is_required')),\r\n    confirmPassword: Yup.string()\r\n      .oneOf([Yup.ref('password')], t('passwords_do_not_match'))\r\n      .required(t('confirm_password_is_required')),\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (error) {\r\n      toast.error(error, {\r\n        position: 'top-center',\r\n        autoClose: 3000,\r\n        hideProgressBar: true,\r\n      });\r\n    }\r\n  }, [error]);\r\n\r\n  useEffect(() => {\r\n    if (isSuccess) {\r\n      toast.success('Profile changed successfully', {\r\n        position: 'top-center',\r\n        autoClose: 3000,\r\n        hideProgressBar: true,\r\n      });\r\n      dispatch(resetSuccess());\r\n    }\r\n  }, [isSuccess]);\r\n\r\n  return (\r\n    <div className={styles.profile}>\r\n      <Header />\r\n      <ToastContainer />\r\n      <Formik\r\n        initialValues={{ name: '', login: '', password: '', confirmPassword: '' }}\r\n        onSubmit={({ name, login, password }, { resetForm }) => {\r\n          dispatch(updateUser({ name, login, password, id, token }));\r\n          resetForm();\r\n        }}\r\n        validationSchema={validationSchema}\r\n      >\r\n        {({ handleSubmit }) => {\r\n          return (\r\n            <Form className={styles.form_profile} onSubmit={handleSubmit}>\r\n              <h1>{t('profile')}</h1>\r\n              <label htmlFor=\"name\">\r\n                {t('name')}\r\n                <Field id=\"name\" name=\"name\" />\r\n                <div className={styles.error}>\r\n                  <ErrorMessage name=\"name\" />\r\n                </div>\r\n              </label>\r\n\r\n              <label htmlFor=\"login\">\r\n                {t('login')}\r\n                <Field id=\"login\" name=\"login\" />\r\n                <div className={styles.error}>\r\n                  <ErrorMessage name=\"login\" />\r\n                </div>\r\n              </label>\r\n\r\n              <label htmlFor=\"password\">\r\n                {t('password')}\r\n                <Field id=\"password\" name=\"password\" type=\"password\" />\r\n                <div className={styles.error}>\r\n                  <ErrorMessage name=\"password\" />\r\n                </div>\r\n              </label>\r\n\r\n              <label htmlFor=\"confirmPassword\">\r\n                {t('confirm_pass')}\r\n                <Field id=\"confirmPassword\" name=\"confirmPassword\" type=\"password\" />\r\n                <div className={styles.error}>\r\n                  <ErrorMessage name=\"confirmPassword\" />\r\n                </div>\r\n              </label>\r\n\r\n              <div className={styles.sub_btn}>\r\n                <div className={styles.loader}>{isLoading && <LoadingAnimation />}</div>\r\n\r\n                <button type=\"submit\" disabled={isLoading}>\r\n                  {t('save_profile')}\r\n                </button>\r\n              </div>\r\n\r\n              <div className={styles.del_btn}>\r\n                <button type=\"button\" onClick={() => setIsOpenModal(true)} disabled={isLoading}>\r\n                  {t('del_user')}\r\n                </button>\r\n              </div>\r\n            </Form>\r\n          );\r\n        }}\r\n      </Formik>\r\n\r\n      <ConfirmModal\r\n        action=\"delete_user\"\r\n        data={{ id, token }}\r\n        isOpenModal={isOpenModal}\r\n        setIsOpenModal={setIsOpenModal}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Profile;\r\n"],"names":["dispatch","useAppDispatch","useState","isOpenModal","setIsOpenModal","token","useAppSelector","state","auth","isLoading","error","isSuccess","id","jwtDecode","userId","t","useTranslation","validationSchema","Yup","shape","name","matches","min","max","required","login","password","confirmPassword","oneOf","useEffect","toast","position","autoClose","hideProgressBar","resetSuccess","className","styles","Header","initialValues","onSubmit","resetForm","updateUser","handleSubmit","htmlFor","type","LoadingAnimation","disabled","onClick","ConfirmModal","action","data"],"sourceRoot":""}