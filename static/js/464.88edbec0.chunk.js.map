{"version":3,"file":"static/js/464.88edbec0.chunk.js","mappings":"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","sources":["webpack://project-management-app/./src/pages/board-page/BoardPage.module.scss?d996","webpack://project-management-app/./src/components/task-modal/TaskModal.module.scss?c4e6","components/task-modal/TaskModal.tsx","webpack://project-management-app/./src/components/task/Task.module.scss?9241","webpack://project-management-app/./src/components/task-modal-change/TaskChangeModal.module.scss?e95e","constants/supportedImageFormat.ts","components/task-modal-change/TaskChangeModal.tsx","components/task/Task.tsx","webpack://project-management-app/./src/components/column/Column.module.scss?38a7","components/column/Column.tsx","pages/board-page/BoardPage.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"container\":\"BoardPage_container__z+7VA\",\"title\":\"BoardPage_title__xfx+x\",\"board\":\"BoardPage_board__z5VC1\",\"board__body\":\"BoardPage_board__body__A-onX\",\"loader\":\"BoardPage_loader__4QEWP\",\"error\":\"BoardPage_error__KaJB8\"};","// extracted by mini-css-extract-plugin\nexport default {\"modal\":\"TaskModal_modal__S9lip\",\"open\":\"TaskModal_open__ivvbt\",\"modal__content\":\"TaskModal_modal__content__Csgk-\",\"cross\":\"TaskModal_cross__ObMjN\",\"error\":\"TaskModal_error__tn5AZ\",\"sub_btn\":\"TaskModal_sub_btn__Di65b\",\"loader\":\"TaskModal_loader__eipKD\"};","import React, { FC } from 'react';\r\nimport styles from './TaskModal.module.scss';\r\nimport cn from 'classnames';\r\nimport { ErrorMessage, Field, Form, Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { useAppDispatch, useAppSelector } from '../../redux-hooks/redux-hooks';\r\nimport jwtDecode from 'jwt-decode';\r\nimport { addTask } from '../../api/tasks';\r\nimport { useTranslation } from 'react-i18next';\r\nimport cross from './../board-modal/assets/cross.svg';\r\nimport LoadingAnimation from '../loading-animation/LoadingAnimation';\r\n\r\ninterface IProps {\r\n  isOpenCreateTaskModal: boolean;\r\n  setIsOpenCreateTaskModal: (val: boolean) => void;\r\n  boardId: string;\r\n  columnId: string;\r\n}\r\n\r\ninterface IJwt {\r\n  userId: string;\r\n}\r\n\r\nconst TaskModal: FC<IProps> = ({\r\n  isOpenCreateTaskModal,\r\n  setIsOpenCreateTaskModal,\r\n  boardId,\r\n  columnId,\r\n}) => {\r\n  const dispatch = useAppDispatch();\r\n  const { tasks, isLoading } = useAppSelector((state) => state.tasks);\r\n  const { userId } = jwtDecode<IJwt>(localStorage.getItem('token') || '');\r\n  const { t } = useTranslation();\r\n\r\n  return (\r\n    <div\r\n      className={cn(styles.modal, { [styles.open]: isOpenCreateTaskModal })}\r\n      onClick={() => setIsOpenCreateTaskModal(false)}\r\n    >\r\n      <div className={styles.modal__content} onClick={(e) => e.stopPropagation()}>\r\n        <img\r\n          className={styles.cross}\r\n          src={cross}\r\n          alt=\"cross\"\r\n          onClick={() => setIsOpenCreateTaskModal(false)}\r\n        />\r\n        <Formik\r\n          initialValues={{ title: '', description: '' }}\r\n          onSubmit={({ title, description }, { resetForm }) => {\r\n            dispatch(\r\n              addTask({\r\n                boardId: boardId,\r\n                columnId: columnId,\r\n                values: {\r\n                  order: tasks[columnId].length + 1,\r\n                  title,\r\n                  description,\r\n                  userId,\r\n                },\r\n              })\r\n            );\r\n\r\n            resetForm();\r\n          }}\r\n          validationSchema={Yup.object().shape({\r\n            title: Yup.string()\r\n              .min(4, t('must_be_more_than_4_characters'))\r\n              .max(12, t('must_be_less_than_12_characters'))\r\n              .required(t('title_is_required')),\r\n            description: Yup.string()\r\n              .min(2, t('must_be_more_than_2_characters'))\r\n              .required(t('description_is_required')),\r\n          })}\r\n        >\r\n          {({ handleSubmit }) => {\r\n            return (\r\n              <Form className={styles.form} onSubmit={handleSubmit}>\r\n                <label htmlFor=\"title\">\r\n                  {t('title_task')}\r\n                  <Field id=\"title\" name=\"title\" />\r\n                  <div className={styles.error}>\r\n                    <ErrorMessage name=\"title\" />\r\n                  </div>\r\n                </label>\r\n                <label htmlFor=\"description\">\r\n                  {t('description_task')}\r\n                  <Field id=\"description\" name=\"description\" />\r\n                  <div className={styles.error}>\r\n                    <ErrorMessage name=\"description\" />\r\n                  </div>\r\n                </label>\r\n                <div className={styles.sub_btn}>\r\n                  <div className={styles.loader}>{isLoading && <LoadingAnimation />}</div>\r\n                  <button type=\"submit\" disabled={isLoading}>\r\n                    {t('create')}\r\n                  </button>\r\n                </div>\r\n              </Form>\r\n            );\r\n          }}\r\n        </Formik>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TaskModal;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"task\":\"Task_task__1xhFm\",\"image-preview\":\"Task_image-preview__IfVHW\",\"title\":\"Task_title__mqFS1\",\"description\":\"Task_description__fmsr2\",\"taskHead\":\"Task_taskHead__hmpyv\",\"hat\":\"Task_hat__mr8iH\",\"refactor-delete\":\"Task_refactor-delete__Q-V98\",\"delete\":\"Task_delete__PWElB\",\"refactor\":\"Task_refactor__U1gw7\"};","// extracted by mini-css-extract-plugin\nexport default {\"modal\":\"TaskChangeModal_modal__e4wKI\",\"open\":\"TaskChangeModal_open__IJQA1\",\"modal__content\":\"TaskChangeModal_modal__content__U3a0f\",\"cross\":\"TaskChangeModal_cross__5se2h\",\"error\":\"TaskChangeModal_error__eD9G9\",\"sub_btn\":\"TaskChangeModal_sub_btn__YJYS8\",\"loader\":\"TaskChangeModal_loader__k+otK\",\"text_area\":\"TaskChangeModal_text_area__VZARB\",\"image\":\"TaskChangeModal_image__xGbjT\",\"file\":\"TaskChangeModal_file__jHyKw\"};","export const supportedImageFormat = ['image/jpeg', 'image/jpg', 'image/png'];\r\n","import React, { FC } from 'react';\r\nimport styles from './TaskChangeModal.module.scss';\r\nimport cn from 'classnames';\r\nimport { ErrorMessage, Field, Form, Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { useAppDispatch, useAppSelector } from '../../redux-hooks/redux-hooks';\r\nimport { updateTask } from '../../api/tasks';\r\nimport { ITask } from '../../models/ITask';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { fileUpload } from '../../api/files';\r\nimport cross from './../board-modal/assets/cross.svg';\r\nimport { supportedImageFormat } from '../../constants/supportedImageFormat';\r\nimport LoadingAnimation from '../loading-animation/LoadingAnimation';\r\nimport upload from './assets/upload.png';\r\n\r\ninterface IProps {\r\n  task: ITask;\r\n  isOpenChangeTaskModal: boolean;\r\n  setIsOpenChangeTaskModal: (val: boolean) => void;\r\n  numberTask: number;\r\n}\r\n\r\nconst TaskChangeModal: FC<IProps> = ({\r\n  task,\r\n  isOpenChangeTaskModal,\r\n  setIsOpenChangeTaskModal,\r\n  numberTask,\r\n}) => {\r\n  const dispatch = useAppDispatch();\r\n  const { isLoading, urlImages } = useAppSelector((state) => state.tasks);\r\n  const { t } = useTranslation();\r\n  const hasImage = !!task.files?.length || false;\r\n  const urlImage = urlImages.find((el) => el.taskId === task.id)?.urlImage;\r\n\r\n  return (\r\n    <div\r\n      className={cn(styles.modal, { [styles.open]: isOpenChangeTaskModal })}\r\n      onClick={() => setIsOpenChangeTaskModal(false)}\r\n    >\r\n      <div className={styles.modal__content} onClick={(e) => e.stopPropagation()}>\r\n        <img\r\n          className={styles.cross}\r\n          src={cross}\r\n          alt=\"cross\"\r\n          onClick={() => setIsOpenChangeTaskModal(false)}\r\n        />\r\n        <h2>{`${t('task_number')} ${numberTask}`}</h2>\r\n        <Formik\r\n          initialValues={{\r\n            title: task.title,\r\n            description: task.description,\r\n            file: '' as '' | File,\r\n          }}\r\n          onSubmit={({ title, description, file }) => {\r\n            dispatch(\r\n              updateTask({\r\n                boardId: task.boardId,\r\n                columnId: task.columnId,\r\n                taskId: task.id,\r\n                data: {\r\n                  title: title,\r\n                  order: task.order,\r\n                  description: description,\r\n                  userId: task.userId,\r\n                  boardId: task.boardId,\r\n                  columnId: task.columnId,\r\n                },\r\n              })\r\n            );\r\n\r\n            if (file && !hasImage) {\r\n              dispatch(fileUpload({ taskId: task.id, file: file }));\r\n            }\r\n          }}\r\n          validationSchema={Yup.object().shape({\r\n            title: Yup.string()\r\n              .min(4, t('must_be_more_than_4_characters'))\r\n              .max(12, t('must_be_less_than_12_characters'))\r\n              .required(t('title_is_required')),\r\n            description: Yup.string()\r\n              .min(2, t('must_be_more_than_2_characters'))\r\n              .required(t('description_is_required')),\r\n            file: Yup.mixed()\r\n              .test('fileSize', t('error-image_size'), (img) => {\r\n                if (hasImage) {\r\n                  return true;\r\n                }\r\n                if (typeof img === 'object') {\r\n                  return img?.size <= 500000;\r\n                } else {\r\n                  return true;\r\n                }\r\n              })\r\n              .test('type', t('error-image_type'), (img) => {\r\n                if (hasImage) {\r\n                  return true;\r\n                }\r\n                if (typeof img === 'object') {\r\n                  return supportedImageFormat.includes(img?.type);\r\n                } else {\r\n                  return true;\r\n                }\r\n              }),\r\n          })}\r\n        >\r\n          {({ handleSubmit, setFieldValue, values }) => {\r\n            return (\r\n              <Form className={styles.form} onSubmit={handleSubmit}>\r\n                <label htmlFor=\"title\">\r\n                  {t('title_task')}\r\n                  <Field id=\"title\" name=\"title\" />\r\n                  <div className={styles.error}>\r\n                    <ErrorMessage name=\"title\" />\r\n                  </div>\r\n                </label>\r\n                <label htmlFor=\"description\">\r\n                  {t('description_task')}\r\n                  <Field\r\n                    as=\"textarea\"\r\n                    id=\"description\"\r\n                    name=\"description\"\r\n                    className={styles.text_area}\r\n                  />\r\n                  <div className={styles.error}>\r\n                    <ErrorMessage name=\"description\" />\r\n                  </div>\r\n                </label>\r\n                {!hasImage && (\r\n                  <label className={styles.file} htmlFor=\"file\">\r\n                    <div>{t('choose_image')}</div>\r\n                    <img width={50} src={upload} alt=\"upload\" />\r\n                    <input\r\n                      id=\"file\"\r\n                      type=\"file\"\r\n                      name=\"file\"\r\n                      onChange={(event: React.ChangeEvent) => {\r\n                        const target = event.target as HTMLInputElement;\r\n                        const file: File = (target.files as FileList)[0];\r\n                        setFieldValue('file', file);\r\n                      }}\r\n                    />\r\n                    {values.file && <p>{values.file.name}</p>}\r\n                    <div className={styles.error}>\r\n                      <ErrorMessage name=\"file\" />\r\n                    </div>\r\n                  </label>\r\n                )}\r\n                {urlImage && (\r\n                  <div className={styles.image}>\r\n                    <img src={urlImage} alt=\"image of task\" />\r\n                  </div>\r\n                )}\r\n                <div className={styles.sub_btn}>\r\n                  <div className={styles.loader}>{isLoading && <LoadingAnimation />}</div>\r\n                  <button type=\"submit\" disabled={isLoading}>\r\n                    {t('update')}\r\n                  </button>\r\n                </div>\r\n              </Form>\r\n            );\r\n          }}\r\n        </Formik>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TaskChangeModal;\r\n","import React, { FC, useEffect, useState } from 'react';\r\nimport styles from './Task.module.scss';\r\nimport { ITask } from '../../models/ITask';\r\nimport ConfirmModal from '../confirm-modal/ConfirmModal';\r\nimport TaskChangeModal from '../task-modal-change/TaskChangeModal';\r\nimport refactorIcon from './assets/pencil.png';\r\nimport deleteIcon from './assets/delete.png';\r\nimport { useAppDispatch, useAppSelector } from '../../redux-hooks/redux-hooks';\r\nimport { fileDownload } from '../../api/files';\r\nimport defaultImage from './assets/default-image.jpg';\r\nimport { Draggable } from 'react-beautiful-dnd';\r\nimport { t } from 'i18next';\r\n\r\ninterface IProps {\r\n  task: ITask;\r\n  index: number;\r\n}\r\n\r\nconst Task: FC<IProps> = React.memo(({ task, index }) => {\r\n  const dispatch = useAppDispatch();\r\n  const { title, description, boardId, columnId, id: taskId } = task;\r\n  const { tasks: allTasks, isUpdateTask, urlImages } = useAppSelector((state) => state.tasks);\r\n  const tasks = allTasks[columnId];\r\n  const urlImage = urlImages.find((el) => el.taskId === task.id)?.urlImage || defaultImage;\r\n\r\n  const [isOpenModal, setIsOpenModal] = useState(false);\r\n  const [isOpenChangeTaskModal, setIsOpenChangeTaskModal] = useState(false);\r\n  const hasImage = !!task.files?.length || false;\r\n\r\n  useEffect(() => {\r\n    setIsOpenChangeTaskModal(false);\r\n  }, [isUpdateTask]);\r\n\r\n  useEffect(() => {\r\n    if (hasImage) {\r\n      dispatch(fileDownload({ taskId: task.id, fileName: task.files[0].filename }));\r\n    }\r\n  }, [hasImage]);\r\n\r\n  return (\r\n    <Draggable draggableId={task.id as string} index={index}>\r\n      {(provided) => {\r\n        return (\r\n          <div className={styles.task} {...provided.draggableProps} ref={provided.innerRef}>\r\n            <div className={styles.taskHead} {...provided.dragHandleProps}>\r\n              <div className={styles.hat}>\r\n                <h3 className={styles.title}>{`${index + 1}) ${title}`}</h3>\r\n\r\n                <div className={styles['refactor-delete']}>\r\n                  <div\r\n                    className={styles.refactor}\r\n                    title={t('edit')}\r\n                    onClick={() => setIsOpenChangeTaskModal(true)}\r\n                  >\r\n                    <img width={26} src={refactorIcon} alt=\"refactor icon\" />\r\n                  </div>\r\n                  <div\r\n                    className={styles.delete}\r\n                    title={t('delete')}\r\n                    onClick={() => setIsOpenModal(true)}\r\n                  >\r\n                    <img width={30} src={deleteIcon} alt=\"delete icon\" />\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div className={styles['image-preview']}>\r\n                <img src={urlImage} alt=\"default preview\" />\r\n              </div>\r\n\r\n              <ConfirmModal\r\n                isOpenModal={isOpenModal}\r\n                setIsOpenModal={setIsOpenModal}\r\n                action={'delete_task'}\r\n                data={{ boardId, columnId, taskId, tasks }}\r\n              />\r\n            </div>\r\n\r\n            <p className={styles.description}>{description}</p>\r\n            {isOpenChangeTaskModal && (\r\n              <TaskChangeModal\r\n                task={task}\r\n                isOpenChangeTaskModal={isOpenChangeTaskModal}\r\n                setIsOpenChangeTaskModal={setIsOpenChangeTaskModal}\r\n                numberTask={index + 1}\r\n              />\r\n            )}\r\n          </div>\r\n        );\r\n      }}\r\n    </Draggable>\r\n  );\r\n});\r\n\r\nexport default Task;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"column\":\"Column_column__Yrxbq\",\"loader\":\"Column_loader__o5rh7\",\"columnHead\":\"Column_columnHead__+9dDd\",\"titleColumnBlock\":\"Column_titleColumnBlock__APfC5\",\"title\":\"Column_title__+cQzY\",\"tasks\":\"Column_tasks__ghAru\",\"delete\":\"Column_delete__eg3Ti\",\"buttonCreate\":\"Column_buttonCreate__g+Bus\",\"title_form\":\"Column_title_form__yPdkJ\",\"input\":\"Column_input__OD49p\",\"error\":\"Column_error__d4-DV\",\"buttons\":\"Column_buttons__+DIa5\",\"buttonCancel\":\"Column_buttonCancel__oI6we\",\"buttonSubmit\":\"Column_buttonSubmit__mokS5\"};","import React, { FC, useEffect, useState } from 'react';\r\nimport { ErrorMessage, Field, Form, Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { updateColumn } from '../../api/columns';\r\nimport { getTasks } from '../../api/tasks';\r\nimport { IColumn } from '../../models/IColumn';\r\nimport { useAppDispatch, useAppSelector } from '../../redux-hooks/redux-hooks';\r\nimport ConfirmModal from '../confirm-modal/ConfirmModal';\r\nimport TaskModal from '../task-modal/TaskModal';\r\nimport Task from '../task/Task';\r\nimport styles from './Column.module.scss';\r\nimport LoadingAnimation from '../loading-animation/LoadingAnimation';\r\nimport { Draggable, Droppable } from 'react-beautiful-dnd';\r\nimport deleteIcon from './../../components/task/assets/delete.png';\r\nimport submitIcon from './assets/submit.png';\r\nimport cancelIcon from './assets/cancel.png';\r\nimport plus from './../header/assets/plus.png';\r\n\r\ninterface IProps {\r\n  column: IColumn;\r\n  index: number;\r\n}\r\n\r\nconst Columns: FC<IProps> = React.memo(({ column, index }) => {\r\n  const { title, id: columnId = '', order } = column;\r\n  const dispatch = useAppDispatch();\r\n  const { boardId, isLoading, columns } = useAppSelector((state) => state.columns);\r\n  const {\r\n    tasks,\r\n    isLoading: isLoadingTasks,\r\n    isCreateTask,\r\n    successUpload,\r\n  } = useAppSelector((state) => state.tasks);\r\n  const { t } = useTranslation();\r\n\r\n  const [isOpenConfirmationModal, setIsOpenConfirmationModal] = useState(false);\r\n  const [isOpenCreateTaskModal, setIsOpenCreateTaskModal] = useState(false);\r\n  const [isTitleInput, setIsTitleInput] = useState(false);\r\n\r\n  useEffect(() => {\r\n    dispatch(getTasks({ boardId, columnId }));\r\n  }, [columnId, successUpload]);\r\n\r\n  useEffect(() => {\r\n    setIsOpenCreateTaskModal(false);\r\n  }, [isCreateTask]);\r\n\r\n  return (\r\n    <Draggable draggableId={column.id as string} index={index}>\r\n      {(provided) => (\r\n        <div className={styles.column} {...provided.draggableProps} ref={provided.innerRef}>\r\n          {isLoadingTasks && (\r\n            <div className={styles.loader}>\r\n              <LoadingAnimation />\r\n            </div>\r\n          )}\r\n          <div className={styles.columnHead} {...provided.dragHandleProps}>\r\n            {isTitleInput ? (\r\n              <Formik\r\n                initialValues={{ title }}\r\n                onSubmit={({ title }, { resetForm }) => {\r\n                  dispatch(updateColumn({ boardId, columnId, data: { order, title } }));\r\n                  resetForm();\r\n                  setIsTitleInput(false);\r\n                }}\r\n                validationSchema={Yup.object().shape({\r\n                  title: Yup.string()\r\n                    .min(3, t('must_be_more_than_3_characters'))\r\n                    .max(12, t('must_be_less_than_12_characters'))\r\n                    .required(t('title_is_required')),\r\n                })}\r\n              >\r\n                {({ handleSubmit, handleBlur, isValid }) => {\r\n                  return (\r\n                    <Form\r\n                      className={styles.title_form}\r\n                      onSubmit={handleSubmit}\r\n                      onBlur={(e) => {\r\n                        handleBlur(e);\r\n                        if (isValid) {\r\n                          setTimeout(() => {\r\n                            setIsTitleInput(false);\r\n                          }, 100);\r\n                        }\r\n                      }}\r\n                    >\r\n                      <div className={styles.buttons}>\r\n                        <button className={styles.buttonSubmit} type=\"submit\" title={t('save')}>\r\n                          <img src={submitIcon} alt=\"submit button\" />\r\n                        </button>\r\n                        <button\r\n                          type=\"button\"\r\n                          title={t('cancel')}\r\n                          className={styles.buttonCancel}\r\n                          onClick={(e) => {\r\n                            e.preventDefault();\r\n                            setIsTitleInput(false);\r\n                          }}\r\n                        >\r\n                          <img src={cancelIcon} alt=\"cancel button\" />\r\n                        </button>\r\n                      </div>\r\n                      <label htmlFor=\"title\">\r\n                        {t('title_column')}\r\n                        <Field id=\"title\" name=\"title\" className={styles.input} autoFocus={true} />\r\n                        <div className={styles.error}>\r\n                          <ErrorMessage name=\"title\" />\r\n                        </div>\r\n                      </label>\r\n                      {isLoading && <div className={styles.loader}>{<LoadingAnimation />}</div>}\r\n                    </Form>\r\n                  );\r\n                }}\r\n              </Formik>\r\n            ) : (\r\n              <div className={styles.titleColumnBlock}>\r\n                <h1\r\n                  className={styles.title}\r\n                  title={t('click_to_change')}\r\n                  onClick={() => setIsTitleInput(true)}\r\n                >\r\n                  {title}\r\n                </h1>\r\n                <div\r\n                  className={styles.delete}\r\n                  title={t('delete')}\r\n                  onClick={() => setIsOpenConfirmationModal(true)}\r\n                >\r\n                  <img src={deleteIcon} alt=\"delete icon\" />\r\n                </div>\r\n              </div>\r\n            )}\r\n            <ConfirmModal\r\n              isOpenModal={isOpenConfirmationModal}\r\n              setIsOpenModal={setIsOpenConfirmationModal}\r\n              data={{ columns, columnId, boardId }}\r\n              action={'delete_column'}\r\n            />\r\n          </div>\r\n\r\n          <Droppable droppableId={column.id as string}>\r\n            {(provided) => (\r\n              <div className={styles.tasks} {...provided.droppableProps} ref={provided.innerRef}>\r\n                {tasks[columnId] &&\r\n                  tasks[columnId].map((task, index) => {\r\n                    return <Task key={task.id} task={task} index={index} />;\r\n                  })}\r\n                {provided.placeholder}\r\n              </div>\r\n            )}\r\n          </Droppable>\r\n\r\n          <button className={styles.buttonCreate} onClick={() => setIsOpenCreateTaskModal(true)}>\r\n            <img width={26} src={plus} alt=\"plus\" />\r\n            {t('create_task')}\r\n          </button>\r\n\r\n          <TaskModal\r\n            isOpenCreateTaskModal={isOpenCreateTaskModal}\r\n            setIsOpenCreateTaskModal={setIsOpenCreateTaskModal}\r\n            boardId={boardId}\r\n            columnId={columnId}\r\n          />\r\n        </div>\r\n      )}\r\n    </Draggable>\r\n  );\r\n});\r\n\r\nexport default Columns;\r\n","import React, { useEffect } from 'react';\r\nimport styles from './BoardPage.module.scss';\r\nimport { useAppDispatch, useAppSelector } from '../../redux-hooks/redux-hooks';\r\nimport { changeColumnsOrder, getColumns } from '../../api/columns';\r\nimport Column from '../../components/column/Column';\r\nimport { IColumn } from '../../models/IColumn';\r\nimport Header from '../../components/header/Header';\r\nimport { useTranslation } from 'react-i18next';\r\nimport LoadingAnimation from '../../components/loading-animation/LoadingAnimation';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport { DragDropContext, Droppable, DropResult } from 'react-beautiful-dnd';\r\nimport { toast, ToastContainer } from 'react-toastify';\r\nimport { resetCreateNewColumn } from '../../store/columnsSlice';\r\nimport { resetCreateNewTask, resetUpdateTask } from '../../store/tasksSlice';\r\nimport { changeTasksOrderOneColumn, changeTasksOrderTwoColumns } from '../../api/tasks';\r\nimport { getBoards } from '../../api/boards';\r\n\r\nconst BoardPage = React.memo(() => {\r\n  const dispatch = useAppDispatch();\r\n  const { token } = useAppSelector((state) => state.auth);\r\n  const { boards } = useAppSelector((state) => state.boards);\r\n  const { isLoading, columns, boardId, errorColumn, isCreateColumn } = useAppSelector(\r\n    (state) => state.columns\r\n  );\r\n  const targetBoard = boards.find((el) => el.id === boardId);\r\n  const { isCreateTask, isUpdateTask, errorTask, tasks } = useAppSelector((state) => state.tasks);\r\n  const { t } = useTranslation();\r\n\r\n  useEffect(() => {\r\n    if (!boards.length) {\r\n      dispatch(getBoards(token));\r\n    }\r\n  }, [boards.length]);\r\n\r\n  useEffect(() => {\r\n    dispatch(getColumns(boardId));\r\n  }, [boardId]);\r\n\r\n  useEffect(() => {\r\n    if (errorTask) {\r\n      toast.error(errorTask, {\r\n        position: 'top-center',\r\n        autoClose: 3000,\r\n        hideProgressBar: true,\r\n      });\r\n    }\r\n  }, [errorTask]);\r\n\r\n  const onDragEnd = (result: DropResult) => {\r\n    const { source, destination, type } = result;\r\n\r\n    if (!destination) return;\r\n\r\n    const startIndex = source.index;\r\n    const endIndex = destination.index;\r\n\r\n    if (type === 'column') {\r\n      if (startIndex === endIndex) return;\r\n\r\n      dispatch(\r\n        changeColumnsOrder({ boardId, startIndex, endIndex, columns: columns as IColumn[] })\r\n      );\r\n      return;\r\n    }\r\n\r\n    //reordering in same list\r\n    if (source.droppableId === destination.droppableId) {\r\n      if (startIndex === endIndex) return;\r\n      const tasksOfColumn = tasks[source.droppableId];\r\n      const columnId = source.droppableId;\r\n      dispatch(\r\n        changeTasksOrderOneColumn({ boardId, columnId, startIndex, endIndex, tasksOfColumn })\r\n      );\r\n      return;\r\n    }\r\n\r\n    // moving between lists\r\n    const sourceColumn = tasks[source.droppableId];\r\n    const destinationColumn = tasks[destination.droppableId];\r\n    const destinationColumnId = destination.droppableId;\r\n\r\n    dispatch(\r\n      changeTasksOrderTwoColumns({\r\n        boardId,\r\n        sourceColumn,\r\n        destinationColumn,\r\n        startIndex,\r\n        endIndex,\r\n        destinationColumnId,\r\n      })\r\n    );\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (isCreateColumn) {\r\n      toast.success(t('new_column_created'), {\r\n        position: 'top-center',\r\n        autoClose: 3000,\r\n        hideProgressBar: true,\r\n      });\r\n      dispatch(resetCreateNewColumn());\r\n    }\r\n    if (isCreateTask) {\r\n      toast.success(t('new_task_created'), {\r\n        position: 'top-center',\r\n        autoClose: 3000,\r\n        hideProgressBar: true,\r\n      });\r\n      dispatch(resetCreateNewTask());\r\n    }\r\n    if (isUpdateTask) {\r\n      toast.success(t('update_task'), {\r\n        position: 'top-center',\r\n        autoClose: 3000,\r\n        hideProgressBar: true,\r\n      });\r\n      dispatch(resetUpdateTask());\r\n    }\r\n    if (errorColumn !== 'Unauthorized' && errorColumn !== '') {\r\n      toast.error(errorColumn, {\r\n        position: 'top-center',\r\n        autoClose: 3000,\r\n        hideProgressBar: true,\r\n      });\r\n    }\r\n    if (errorTask !== 'Unauthorized' && errorTask !== '') {\r\n      toast.error(errorTask, {\r\n        position: 'top-center',\r\n        autoClose: 3000,\r\n        hideProgressBar: true,\r\n      });\r\n    }\r\n  }, [errorColumn, errorTask, isCreateColumn, isCreateTask, isUpdateTask]);\r\n\r\n  return (\r\n    <div className={styles.container}>\r\n      <Header />\r\n      <ToastContainer />\r\n      <h1 className={styles.title}>{targetBoard?.title}</h1>\r\n      <div className={styles.board}>\r\n        {isLoading && (\r\n          <div className={styles.loader}>\r\n            <LoadingAnimation />\r\n          </div>\r\n        )}\r\n        <DragDropContext onDragEnd={onDragEnd}>\r\n          <Droppable droppableId=\"all-droppable\" direction=\"horizontal\" type=\"column\">\r\n            {(provided) => (\r\n              <div\r\n                className={styles.board__body}\r\n                {...provided.droppableProps}\r\n                ref={provided.innerRef}\r\n              >\r\n                {!!columns.length ? (\r\n                  columns?.map((column: IColumn, index: number) => (\r\n                    <Column key={column.id} column={column} index={index} />\r\n                  ))\r\n                ) : (\r\n                  <h4>{t('columns_not_found')}</h4>\r\n                )}\r\n                {provided.placeholder}\r\n              </div>\r\n            )}\r\n          </Droppable>\r\n        </DragDropContext>\r\n      </div>\r\n    </div>\r\n  );\r\n});\r\n\r\nexport default BoardPage;\r\n"],"names":["isOpenCreateTaskModal","setIsOpenCreateTaskModal","boardId","columnId","dispatch","useAppDispatch","useAppSelector","state","tasks","isLoading","userId","jwtDecode","localStorage","getItem","t","useTranslation","className","cn","styles","onClick","e","stopPropagation","src","cross","alt","initialValues","title","description","onSubmit","resetForm","addTask","values","order","length","validationSchema","Yup","shape","min","max","required","handleSubmit","htmlFor","id","name","LoadingAnimation","type","disabled","supportedImageFormat","task","isOpenChangeTaskModal","setIsOpenChangeTaskModal","numberTask","urlImages","hasImage","files","urlImage","find","el","taskId","file","updateTask","data","fileUpload","test","img","size","includes","setFieldValue","as","width","upload","onChange","event","target","React","index","allTasks","isUpdateTask","useState","isOpenModal","setIsOpenModal","useEffect","fileDownload","fileName","filename","draggableId","provided","draggableProps","ref","innerRef","dragHandleProps","refactorIcon","deleteIcon","ConfirmModal","action","column","columns","isLoadingTasks","isCreateTask","successUpload","isOpenConfirmationModal","setIsOpenConfirmationModal","isTitleInput","setIsTitleInput","getTasks","updateColumn","handleBlur","isValid","onBlur","setTimeout","preventDefault","autoFocus","droppableId","droppableProps","map","placeholder","plus","token","auth","boards","errorColumn","isCreateColumn","targetBoard","errorTask","getBoards","getColumns","toast","position","autoClose","hideProgressBar","resetCreateNewColumn","resetCreateNewTask","resetUpdateTask","Header","onDragEnd","result","source","destination","startIndex","endIndex","sourceColumn","destinationColumn","destinationColumnId","changeTasksOrderTwoColumns","tasksOfColumn","changeTasksOrderOneColumn","changeColumnsOrder","direction","Column"],"sourceRoot":""}